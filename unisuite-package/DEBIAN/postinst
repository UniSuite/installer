#!/bin/bash
set -e

# Überprüfe ob NodeJS installiert ist
if ! dpkg -l | grep -q nodejs; then
  echo "NodeJS ist nicht installiert"
  exit 1
else
  echo "NodeJS ist bereits installiert."
fi

# Überprüfe ob NPM installiert ist
if ! dpkg -l | grep -q npm; then
  echo "NPM ist nicht installiert"
  exit 1
else
  echo "NPM ist bereits installiert."
fi

# Überprüfe ob Nginx installiert ist
if ! dpkg -l | grep -q nginx; then
  echo "Nginx ist nicht installiert"
  exit 1
else
  echo "Nginx ist bereits installiert."
  systemctl enable nginx
fi

# Überprüfe ob Apache2 installiert ist
if ! dpkg -l | grep -q apache2; then
  echo "Apache2 ist nicht installiert"
  exit 1
else
  echo "Apache2 ist bereits installiert."
  systemctl enable apache2
fi

# Überprüfe ob UFW installiert ist
if ! dpkg -l | grep -q ufw; then
  echo "UFW ist nicht installiert"
  exit 1
else
  echo "UFW ist bereits installiert."
fi

# Überprüfe ob unattended-upgrades installiert ist
if ! dpkg -l | grep -q unattended-upgrades; then
  echo "unattended-upgrades ist nicht installiert"
  exit 1
else
  echo "vunattended-upgrades ist bereits installiert."
fi

# Überprüfe ob Fail2Ban installiert ist
if ! dpkg -l | grep -q fail2ban; then
  echo "Fail2Ban ist nicht installiert"
  exit 1
else
  echo "Fail2Ban ist bereits installiert."
fi

# Überprüfe ob ClamAV installiert ist
if ! dpkg -l | grep -q clamav; then
  echo "ClamAV ist nicht installiert"
  exit 1
else
  echo "ClamAV ist bereits installiert."
fi

# Überprüfe ob ClamAV-Daemon installiert ist
if ! dpkg -l | grep -q clamav-daemon; then
  echo "ClamAV-Daemon ist nicht installiert"
  exit 1
else
  echo "ClamAV-Daemon ist bereits installiert."
fi

# Überprüfe ob Certbot installiert ist
if ! dpkg -l | grep -q certbot; then
  echo "CertBot ist nicht installiert"
  exit 1
else
  echo "CertBot ist bereits installiert."
fi

# Permissions
chown -R www-data:www-data /var/www/unisuite
chmod -R 755 /var/www/unisuite
chown -R www-data:www-data /var/unisuite-api

# Aktivieren der notwendigen Apache-Module
echo "Aktiviere Apache-Module..."
a2enmod ssl
a2enmod rewrite
a2enmod headers
a2enmod deflate

# Aktivieren der 000-default.conf Site und Deaktivieren der default-ssl.conf Site
echo "Aktiviere/Deaktiviere Sites..."
a2dissite default-ssl.conf
a2dissite 000-default.conf
a2ensite unisuite.conf

LINK_TARGET="/etc/nginx/sites-enabled/unisuite"
SOURCE="/etc/nginx/sites-available/unisuite"

# Überprüfen, ob der Symlink bereits existiert
if [ ! -L "$LINK_TARGET" ]; then
    ln -s "$SOURCE" "$LINK_TARGET"
    echo "Symlink wurde erstellt: $LINK_TARGET -> $SOURCE"
else
    echo "Symlink existiert bereits: $LINK_TARGET"
fi

FILE="/etc/nginx/sites-enabled/default"

# Überprüfen, ob die Datei existiert
if [ -f "$FILE" ]; then
    rm "$FILE"
    echo "Datei entfernt: $FILE"
else
    echo "Datei existiert nicht: $FILE"
fi

# Aktualisiere Ports
rm /etc/apache2/ports.conf
echo "Listen 127.0.0.1:8080" | tee /etc/apache2/ports.conf

# SSL
mkdir /var/www/certbot/
certbot certonly --webroot -w /var/www/certbot -d "unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "www.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "api.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "app.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "auth.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "community.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "developer.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "docs.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "help.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "jobs.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
certbot certonly --webroot -w /var/www/certbot -d "status.unisuite.de" --non-interactive --agree-tos --email lukaspoggemann@gmail.com
echo "0 3 * * * /usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'" | crontab -

# NGINX neu starten
if systemctl is-active --quiet nginx; then
  echo "NGINX wird neu gestartet..."
  systemctl restart nginx
else
  echo "NGINX ist nicht aktiv, starte NGINX..."
  systemctl start nginx
fi

# Apache2 neu starten
if systemctl is-active --quiet apache2; then
  echo "Apache2 wird neu gestartet..."
  systemctl restart apache2
else
  echo "Apache2 ist nicht aktiv, starte Apache2..."
  systemctl start apache2
fi

# System Services laden
systemctl daemon-reload
systemctl enable unisuite-api.service
systemctl start unisuite-api.service

# Fail2Ban
systemctl enable fail2ban
systemctl start fail2ban

# UFW
echo "Konfiguriere Firewall..."
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 1505/tcp
ufw allow 22/tcp
ufw allow 21/tcp
ufw logging on

# ClamAV
echo "Konfiguriere Anti Virus..."
(crontab -l; echo "0 3 * * * /usr/bin/freshclam --quiet") | crontab -
(crontab -l; echo "30 4 * * * /usr/bin/clamscan -r /etc /var /home /usr/local /tmp -i --log=/var/log/clamav/scan.log") | crontab -
systemctl enable clamav-daemon
systemctl start clamav-daemon


# Unattended Upgrades
echo "Konfiguriere Automatische Updates..."
systemctl enable unattended-upgrades
systemctl start unattended-upgrades
(crontab -l; echo "0 3 * * * /usr/bin/unattended-upgrades -d") | crontab -

echo "Pre-Installation abgeschlossen."
echo "---"

# Countdown von 10 Sekunden
echo "Das System wird neu gestartet um die Änderungen anzuwenden."
echo "Drücken Sie Strg+C, um den Neustart abzubrechen."
for i in {15..1}
do
    if [ $i -eq 1 ]; then
        echo -ne "-> $i Sekunde verbleibt...\r"  # Einzahl
    else
        echo -ne "-> $i Sekunden verbleiben...\r"  # Mehrzahl
    fi
    sleep 1
done

# Sicherer Neustart des Systems
echo "Das System wird jetzt neu gestartet..."

shutdown -r now
